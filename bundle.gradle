def baseBuildDir = project(":app").getBuildDir().getAbsolutePath()
println baseBuildDir
def baseApk = baseBuildDir + "/outputs/apk/debug/app-debug.apk"
def baseLib = baseBuildDir + "/intermediates/jar/debug"
def baseLibJar = baseLib + "/classes.jar"
def baseR = baseBuildDir + "/generated/source/r/debug/com/example/mytest/R.java"
def androidPath = "C:/Users/Administrator/AppData/Local/Android/sdk/platforms/android-27/android.jar"

def baseAssetDir = project(":app").file("/src/main/assets/").getAbsolutePath()

def pkgMap = ['login': '0x80', 'order': '0x90']

def buildDir = project.getBuildDir().getAbsolutePath()
def genSourceDir = buildDir + "/generated/sources/r/debug/"
def resourceDir = buildDir + "/intermediates/res"
def classDir = buildDir + "/intermediates/classes/debug"
def resourcePath = "$resourceDir/resources.zip"

def bundleResourceDir = file('/src/main/res').getAbsolutePath()
def manifestPath = file('/src/main/AndroidManifest.xml').getAbsolutePath()
def javaPath = file('/src/main/java').getAbsolutePath()
def rPath = buildDir + "/generated/sources/r/debug/"

def customPackage = "com.example." + project.name
def packageId = pkgMap[project.name]

task init() {
    File build = new File(buildDir)
    if (build.exists()) {
        build.deleteDir()
    }
    build.mkdir()

    File sourceDir = new File(genSourceDir)
    sourceDir.mkdirs()
    File resDir = new File(resourceDir)
    resDir.mkdirs()
    File clsDir = new File(classDir)
    clsDir.mkdirs()
}

/**
 * aapt_win package -f -M D:\MyTest\order\src\main\AndroidManifest.xml -I "%ANDROID_HOME%/platforms/android-27/android.jar" -I D:\MyTest\app\build/outputs/apk/debug/app-debug.apk -S D:\MyTest\order\src\m
 ain\res -J D:\MyTest\order\build/generated/sources/r/debug/ -m -F D:\MyTest\order\build/intermediates/res/resources.zip --custom-package com.example.order -o 'apk' --public-R-path D:\MyTest\app\build/
 generated/source/r/debug/com/example/mytest/R.java --apk-module "0x90"
 */
task aaptDebug(dependsOn: 'init') {
    StringBuilder command = new StringBuilder()
    command.append("aapt_win package -f").append(" ")
    command.append("-M $manifestPath").append(" ")
    command.append("-I \"$androidPath\"").append(" ")
    command.append("-I $baseApk").append(" ")
    command.append("-S $bundleResourceDir").append(" ")
    command.append("-J $genSourceDir -m").append(" ")
    command.append("-F $resourcePath").append(" ")
    command.append("--custom-package $customPackage -o 'apk'").append(" ")
    command.append("--public-R-path $baseR").append(" ")
    command.append("--apk-module \"$packageId\"").append(" ")

    println command.toString()
    project.exec {
        executable 'cmd'
        args '/c', command.toString()
    }
}

/**
 */
task compileJavaDebug(dependsOn: 'aaptDebug') {
    unzipBaseApk("$baseApk", "$baseLib")
    StringBuilder command = new StringBuilder()
    command.append("javac").append(" ")
    command.append("-classpath").append(" ")
    command.append("$baseLibJar").append(";")
    command.append("$androidPath").append(" ")
    command.append("@").append(generateSourceFile("$javaPath", "$rPath")).append(" ")
    command.append("-d $classDir")
    println command.toString()
    project.exec {
        executable 'cmd'
        args '/c', command.toString()
    }
}

void unzipBaseApk(String baseApk, String baseLib) {
    if (new File(baseLib).exists()) {
        return
    }

    def command = "apktool d $baseApk -s -f -o $baseLib"
    project.exec {
        executable 'cmd'
        args '/c', command
    }

    def dex2jar = "d2j-dex2jar $baseLib/classes.dex -o $baseLib/classes.jar"
    println dex2jar
    project.exec {
        executable 'cmd'
        args '/c', dex2jar
    }

}

String generateSourceFile(String javaPath, String rPath) {
    File file = file('source.list')
    File javaDir = new File(javaPath)
    File rDir = new File(rPath)
    def list = []
    getAllSources(javaDir, list)
    getAllSources(rDir, list)
    file.withPrintWriter {
        PrintWriter pw ->
        list.forEach {
            pw.println(it)
        }
    }
    return file.getAbsolutePath()
}

void getAllSources(File dir, List list) {
    if (dir.isDirectory()) {
        for (File file : dir.listFiles()) {
            getAllSources(file, list)
        }
    } else {
        list.add(dir.getAbsolutePath())
    }
}

task makeDex(dependsOn: 'compileJavaDebug') {
    String jarName = project.name + "-class.jar"
    def command = "jar -cvf $buildDir/$jarName -C $classDir/ com/"
    println command
    project.exec {
        executable 'cmd'
        args '/c', command
    }

    String dexName = project.name + ".jar"
    def dex = "dx --dex --output=$buildDir/$dexName $buildDir/$jarName"
    println dex
    project.exec {
        executable 'cmd'
        args '/c', dex
    }
}

task buildBundle(type:Zip, dependsOn: 'makeDex') {
    String dexName = project.name + ".jar"
    String apkName = project.name + ".zip"

    inputs.file "$buildDir/$dexName"
    inputs.file "$resourcePath"

    outputs.file "$buildDir/$apkName"

    destinationDir = file("${buildDir}")
    duplicatesStrategy = 'fail'
    from zipTree("$buildDir/$dexName")
    from zipTree("$resourcePath")

    doLast {
        copy {
            from "$buildDir/$apkName"
            into "$baseAssetDir"
            rename {
                String fileName ->
                    return fileName.split("\\.")[0] + ".so"
            }
        }
    }
}